<?php
/*
 * Copyright (c) 2012-2016, Hofmänner New Media.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of the N2N FRAMEWORK.
 *
 * The N2N FRAMEWORK is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * N2N is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details: http://www.gnu.org/licenses/
 *
 * The following people participated in this project:
 *
 * Andreas von Burg.....: Architect, Lead Developer
 * Bert Hofmänner.......: Idea, Frontend UI, Community Leader, Marketing
 * Thomas Günther.......: Developer, Hangar
 */
namespace n2n\persistence\orm\store\action\supply;

use n2n\persistence\orm\store\action\RemoveAction;
use n2n\util\ex\IllegalStateException;
use n2n\persistence\orm\store\PersistenceOperationException;
use n2n\persistence\orm\property\CascadableEntityProperty;
use n2n\persistence\orm\store\ValueHashCol;

class RemoveSupplyJob extends SupplyJobAdapter {

	public function __construct(RemoveAction $removeAction, ValueHashCol $oldValueHashCol) {
		parent::__construct($removeAction, $oldValueHashCol);
	}

	public function getPersistAction() {
		return $this->entityAction;
	}
	
	public function isInsert() {
		return false;
	}
	
	public function isUpdate() {
		return false;
	}
	
	public function isRemove() {
		return true;
	}

// 	private function getValueHash($propertyName) {
// 		IllegalStateException::assertTrue(array_key_exists($propertyName, $this->valueHashes));
// 		return $this->valueHashes[$propertyName];
// 	}

	public function prepare() {
		if ($this->isDisabled()) return;
		
// 		parent::prepare();		

		foreach ($this->entityAction->getEntityModel()->getEntityProperties() as $entityProperty) {
			if (!($entityProperty instanceof CascadableEntityProperty)) continue;

			$propertyString = $entityProperty->toPropertyString();
			$entityProperty->prepareSupplyJob($this, $this->getValue($propertyString), 
					$this->getOldValueHash($propertyString));
		}
	}

	private function validateId() {
		if (null !== $this->persistAction->getId()) return;

		$idDef = $this->persistAction->getEntityModel()->getIdDef();
		if (!$idDef->isGenerated()) {
			throw new PersistenceOperationException('Id property '
					. $idDef->getEntityProperty()->toPropertyString()
					. ' must contain a non-null value because it will not be generated by the database.');
		}
	}

	public function execute() {
		if ($this->isDisabled()) return;

		IllegalStateException::assertTrue($this->init);
		
		$entityModel = $this->entityAction->getEntityModel();
		
		foreach ($entityModel->getEntityProperties() as $entityProperty) {
			$propertyString = $entityProperty->toPropertyString();
			$entityProperty->supplyRemoveAction($this->entityAction, $this->getValue($propertyString), 
					$this->getOldValueHash($propertyString));
		}
		
		foreach ($entityModel->getActionDependencies() as $actionDependency) {
			$actionDependency->removeActionSupplied($this->entityAction);
		}
	}
}
