<?php
/*
 * Copyright (c) 2012-2016, Hofmänner New Media.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This file is part of the N2N FRAMEWORK.
 *
 * The N2N FRAMEWORK is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * N2N is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details: http://www.gnu.org/licenses/
 *
 * The following people participated in this project:
 *
 * Andreas von Burg.....: Architect, Lead Developer
 * Bert Hofmänner.......: Idea, Frontend UI, Community Leader, Marketing
 * Thomas Günther.......: Developer, Hangar
 */
namespace n2n\util\ini;

use n2n\web\dispatch\target\ArrayItem;

class ArrayProperty extends ContentPartAdapter implements Property {
	private $name;
	private $value;
	/**
	 * @var \n2n\util\ini\ArrayPropertyItem[]
	 */
	private $items = array();
	
	public function __construct(array $lines) {
		$line = array_pop($lines);
		$this->value = array();
		if (IniRepresentation::isArrayProperty($line)) {
			$lines[] = $line;
			$simpleProperty = new SimpleProperty($lines);
			$this->name = $this->extractNameFromSimplePropertyName($simpleProperty->getName());
			$this->appendItem($simpleProperty);
		} else {
			throw new \InvalidArgumentException('Invalid key value pair structure in line "' . $line 
					. '". Expected structure: {key} = "{value}" ;{inlineComment}');	
		}
	}
	
	public function getValue() {
		$value = array();
		foreach ($this->items as $item) {
			if ($item instanceof SimpleProperty) {
				if (null !== ($arrayKey = self::extractArrayKeyFromSimplePropertyName($item->getName()))) {
					$value[$arrayKey] = $item->getValue();
				} else {
					$value[] =  $item->getValue();
				}
			}
		}
		return $value;
	}
	
	public function setValue($value) {
		foreach ($this->items as $key => $item) {
			if ($item instanceof SimpleProperty) {
				unset($this->items[$key]);
			}
		}
		$nextAutoGeneratedValueKey = 0;
		foreach ($value as $valueKey => $valueItem) {
			if (is_numeric($valueKey) && 
					($nextAutoGeneratedValueKey == $valueKey)) {
				$valueKey = '';
				$nextAutoGeneratedValueKey++;
			}  
			$this->appendItem(new SimpleProperty(array($this->name 
					. IniRepresentation::ARRAY_PROPERTY_START_IDENTIFIER . $valueKey 
					. IniRepresentation::ARRAY_PROPERTY_END_IDENTIFIER . IniRepresentation::PROPERTY_ASSIGNATOR 
					. SimpleProperty::generateConditionedValueFor($valueItem))));
		}
	}

	public function getName() {
		return $this->name;
		
	}

	public function setName($name) {
		foreach ($this->items as $item) {
			if ($item instanceof SimpleProperty) {
				$item->setName($name . IniRepresentation::ARRAY_PROPERTY_START_IDENTIFIER 
						. self::extractArrayKeyFromSimplePropertyName($item->getName()) . 
						IniRepresentation::ARRAY_PROPERTY_END_IDENTIFIER);
			}
		}
		$this->name = $name;
	}
	
	public function appendItem(ArrayPropertyItem $item) {
		$this->items[] = $item;
		if ($item instanceof SimpleProperty) {
			if (!IniRepresentation::isArrayProperty($item->__toString()) || 
					(self::extractNameFromSimplePropertyName($item->getName()) != $this->name)) {
						throw new \InvalidArgumentException('Invalid array property item appendage "' . $item->getName() 
								. '" in "' . $this->name . '"given');
			}
		}
	}
	
	public function getComment() {
		$commentString = parent::__toString();
		if (mb_strlen($commentString)) {
			$commentString . PHP_EOL;
		}
		$itemCommments = array();
		foreach ($this->items as $item) {
			$itemComments[] = $item->getComment();
		}
		return $commentString . implode(PHP_EOL, $itemComments);
	}
	
	public function getItems() {
		return $this->items;
	}
	
	public function removeItem(ArrayItem $item) {
		if (false !== ($key = array_search($item, $this->items, true))) {
			unset($this->items[$key]);
		}
	}
	
	public function findPropertyByName($name) {
		foreach ($this->items as $item) {
			if ($item instanceof SimpleProperty && $item->getName() == $name) {
				return $item;
			}
		}
		return null;
	}
	
	public function __toString(): string {
		return parent::__toString() . implode($this->items);
	}

	public static function extractArrayKeyFromSimplePropertyName($name) {
		$matches = array();
		if (1 === preg_match('/' . preg_quote(IniRepresentation::ARRAY_PROPERTY_START_IDENTIFIER) . '.+' . 
				preg_quote(IniRepresentation::ARRAY_PROPERTY_END_IDENTIFIER) . '/', $name, $matches)) {
			return preg_replace('/(^' . preg_quote(IniRepresentation::ARRAY_PROPERTY_START_IDENTIFIER) . '|' . 
					preg_quote(IniRepresentation::ARRAY_PROPERTY_END_IDENTIFIER) . '$)/', '', $matches[0]);
		}
		return null;
	} 
	
	public static function extractNameFromSimplePropertyName($name) {
		$matches = array();
		if (1 === preg_match('/^(\\w+\\.?)+/', $name, $matches)) {
			return trim($matches[0]);
		}
		return null;
	}
	
	public static function extractNameFromString($str) {
		return self::extractNameFromSimplePropertyName(SimpleProperty::extractNameFromString($str));
	}
	
	public static function createWithNameAndValue($name, array $value) {
		//create Dummy ArrayProperty
		$property = new ArrayProperty(array($name
				. IniRepresentation::ARRAY_PROPERTY_START_IDENTIFIER
				. IniRepresentation::ARRAY_PROPERTY_END_IDENTIFIER
				. IniRepresentation::PROPERTY_ASSIGNATOR . IniRepresentation::VALUE_IDENTIFIER . IniRepresentation::VALUE_IDENTIFIER));
		//and set the correct Value
		$property->setValue($value);
		return $property;
	}
}
